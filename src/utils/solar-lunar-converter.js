import dayjs from 'dayjs';

const MIN_YEAR = 1891;
const MAX_YEAR = 2100;

// 公历每一年正月初一的对照表
// 例如 1892 的 [6, 1, 30, 9656]
// 6 表示闰月的月份，
// 1 表示农历正月对应的公历月份
// 30 表示农历正月初一对应的公历天
// 9656 是用于计算当前年份下各个月份的天数
const LUNAR_INFO = [
  [0, 2, 9, 21936], [6, 1, 30, 9656], [0, 2, 17, 9584], [0, 2, 6, 21168], [5, 1, 26, 43344], [0, 2, 13, 59728],    // 1891-1896
  [0, 2, 2, 27296], [3, 1, 22, 44368], [0, 2, 10, 43856], [8, 1, 31, 19304], [0, 2, 19, 19168], [0, 2, 8, 42352],  // 1897-1902
  [5, 1, 29, 21096], [0, 2, 16, 53856], [0, 2, 4, 55632], [4, 1, 25, 27304], [0, 2, 13, 22176], [0, 2, 2, 39632],  // 1903-1908
  [2, 1, 22, 19176], [0, 2, 10, 19168], [6, 1, 30, 42200], [0, 2, 18, 42192], [0, 2, 6, 53840], [5, 1, 26, 54568], // 1909-1914
  [0, 2, 14, 46400], [0, 2, 3, 54944], [2, 1, 23, 38608], [0, 2, 11, 38320], [7, 2, 1, 18872], [0, 2, 20, 18800],  // 1915-1920
  [0, 2, 8, 42160], [5, 1, 28, 45656], [0, 2, 16, 27216], [0, 2, 5, 27968], [4, 1, 24, 44456], [0, 2, 13, 11104],  // 1921-1926
  [0, 2, 2, 38256], [2, 1, 23, 18808], [0, 2, 10, 18800], [6, 1, 30, 25776], [0, 2, 17, 54432], [0, 2, 6, 59984],  // 1927-1932
  [5, 1, 26, 27976], [0, 2, 14, 23248], [0, 2, 4, 11104], [3, 1, 24, 37744], [0, 2, 11, 37600], [7, 1, 31, 51560], // 1933-1938
  [0, 2, 19, 51536], [0, 2, 8, 54432], [6, 1, 27, 55888], [0, 2, 15, 46416], [0, 2, 5, 22176], [4, 1, 25, 43736],  // 1939-1944
  [0, 2, 13, 9680], [0, 2, 2, 37584], [2, 1, 22, 51544], [0, 2, 10, 43344], [7, 1, 29, 46248], [0, 2, 17, 27808],  // 1945-1950
  [0, 2, 6, 46416], [5, 1, 27, 21928], [0, 2, 14, 19872], [0, 2, 3, 42416], [3, 1, 24, 21176], [0, 2, 12, 21168],  // 1951-1956
  [8, 1, 31, 43344], [0, 2, 18, 59728], [0, 2, 8, 27296], [6, 1, 28, 44368], [0, 2, 15, 43856], [0, 2, 5, 19296],  // 1957-1962
  [4, 1, 25, 42352], [0, 2, 13, 42352], [0, 2, 2, 21088], [3, 1, 21, 59696], [0, 2, 9, 55632], [7, 1, 30, 23208],  // 1963-1968
  [0, 2, 17, 22176], [0, 2, 6, 38608], [5, 1, 27, 19176], [0, 2, 15, 19152], [0, 2, 3, 42192], [4, 1, 23, 53864],  // 1969-1974
  [0, 2, 11, 53840], [8, 1, 31, 54568], [0, 2, 18, 46400], [0, 2, 7, 46752], [6, 1, 28, 38608], [0, 2, 16, 38320], // 1975-1980
  [0, 2, 5, 18864], [4, 1, 25, 42168], [0, 2, 13, 42160], [10, 2, 2, 45656], [0, 2, 20, 27216], [0, 2, 9, 27968],  // 1981-1986
  [6, 1, 29, 44448], [0, 2, 17, 43872], [0, 2, 6, 38256], [5, 1, 27, 18808], [0, 2, 15, 18800], [0, 2, 4, 25776],  // 1987-1992
  [3, 1, 23, 27216], [0, 2, 10, 59984], [8, 1, 31, 27432], [0, 2, 19, 23232], [0, 2, 7, 43872], [5, 1, 28, 37736], // 1993-1998
  [0, 2, 16, 37600], [0, 2, 5, 51552], [4, 1, 24, 54440], [0, 2, 12, 54432], [0, 2, 1, 55888], [2, 1, 22, 23208],  // 1999-2004
  [0, 2, 9, 22176], [7, 1, 29, 43736], [0, 2, 18, 9680], [0, 2, 7, 37584], [5, 1, 26, 51544], [0, 2, 14, 43344],   // 2005-2010
  [0, 2, 3, 46240], [4, 1, 23, 46416], [0, 2, 10, 44368], [9, 1, 31, 21928], [0, 2, 19, 19360], [0, 2, 8, 42416],  // 2011-2016
  [6, 1, 28, 21176], [0, 2, 16, 21168], [0, 2, 5, 43312], [4, 1, 25, 29864], [0, 2, 12, 27296], [0, 2, 1, 44368],  // 2017-2022
  [2, 1, 22, 19880], [0, 2, 10, 19296], [6, 1, 29, 42352], [0, 2, 17, 42208], [0, 2, 6, 53856], [5, 1, 26, 59696], // 2023-2028
  [0, 2, 13, 54576], [0, 2, 3, 23200], [3, 1, 23, 27472], [0, 2, 11, 38608], [11, 1, 31, 19176], [0, 2, 19, 19152], // 2029-2034
  [0, 2, 8, 42192], [6, 1, 28, 53848], [0, 2, 15, 53840], [0, 2, 4, 54560], [5, 1, 24, 55968], [0, 2, 12, 46496],  // 2035-2040
  [0, 2, 1, 22224], [2, 1, 22, 19160], [0, 2, 10, 18864], [7, 1, 30, 42168], [0, 2, 17, 42160], [0, 2, 6, 43600],  // 2041-2046
  [5, 1, 26, 46376], [0, 2, 14, 27936], [0, 2, 2, 44448], [3, 1, 23, 21936], [0, 2, 11, 37744], [8, 2, 1, 18808],  // 2047-2052
  [0, 2, 19, 18800], [0, 2, 8, 25776], [6, 1, 28, 27216], [0, 2, 15, 59984], [0, 2, 4, 27424], [4, 1, 24, 43872],  // 2053-2058
  [0, 2, 12, 43744], [0, 2, 2, 37600], [3, 1, 21, 51568], [0, 2, 9, 51552], [7, 1, 29, 54440], [0, 2, 17, 54432],  // 2059-2064
  [0, 2, 5, 55888], [5, 1, 26, 23208], [0, 2, 14, 22176], [0, 2, 3, 42704], [4, 1, 23, 21224], [0, 2, 11, 21200],  // 2065-2070
  [8, 1, 31, 43352], [0, 2, 19, 43344], [0, 2, 7, 46240], [6, 1, 27, 46416], [0, 2, 15, 44368], [0, 2, 5, 21920],  // 2071-2076
  [4, 1, 24, 42448], [0, 2, 12, 42416], [0, 2, 2, 21168], [3, 1, 22, 43320], [0, 2, 9, 26928], [7, 1, 29, 29336],  // 2077-2082
  [0, 2, 17, 27296], [0, 2, 6, 44368], [5, 1, 26, 19880], [0, 2, 14, 19296], [0, 2, 3, 42352], [4, 1, 24, 21104],  // 2083-2088
  [0, 2, 10, 53856], [8, 1, 30, 59696], [0, 2, 18, 54560], [0, 2, 7, 55968], [6, 1, 27, 27472], [0, 2, 15, 22224], // 2089-2094
  [0, 2, 5, 19168], [4, 1, 25, 42216], [0, 2, 12, 42192], [0, 2, 1, 53584], [2, 1, 21, 55592], [0, 2, 9, 54560]    // 2095-2100
];

class SolarLunarConverter {

  solorToLunar(date) {
    let mDate = dayjs(date);
    if (mDate.isBefore(`${MIN_YEAR}-01-01`) || mDate.isAfter(`${MAX_YEAR}-01-01`)) {
      return null;
    }
    let year = mDate.year();
    let month = mDate.month();
    let day = mDate.day();
    if (year === MIN_YEAR && month <= 2 && day <= 9) {
      return `${MIN_YEAR}-01-01`;
    }
    if (year !== this.currentYear) {
      this.currentYear = year;
      this.yearData = LUNAR_INFO[year - MIN_YEAR];
      this.leapMonth = this.getLeapMonth(this.yearData);
      this.monthData = this.getLunarMonths(this.yearData);
      this.yearMonth = this.getMonthsByLunarYear(this.yearData, this.monthData);
    }
    let firstMonth2Solar = this.yearData[1];
    let firstDay2Solar = this.yearData[2];
    firstMonth2Solar = firstMonth2Solar < 10 ? `0${firstMonth2Solar}` : firstMonth2Solar;
    firstDay2Solar = firstDay2Solar < 10 ? `0${firstDay2Solar}` : firstDay2Solar;
    let duration = this.getDaysBetweenSolarDate(date, `${year}-${firstMonth2Solar}-${firstDay2Solar}`);
    return this.getLunarByDuration(duration, year, this.yearMonth, this.leapMonth);
  }

  // 根据距离正月初一的天数计算农历日期
  getLunarByDuration(duration, year, yearMonth, leapMonth) {
    let lunarYear = year, lunarMonth = 0, lunarDay = 0;
    if (duration === 0) {
      lunarMonth = 1;
      lunarDay = 1;
    } else {
      if (duration <= 0) {
        lunarYear = lunarYear - 1;
        duration = this.getDaysByLunarYear(yearMonth) + duration;
      }
      for (let i = 0; i < 13; i++) {
        if (duration === yearMonth[i]) {
          lunarMonth = i + 2;
          lunarDay = 1;
          break;
        } else if (duration < yearMonth[i]) {
          if (leapMonth > 0) {
            if (i < leapMonth) {
              lunarMonth = i + 1;
            } else {
              lunarMonth = i;
            }
          } else {
            lunarMonth = i + 1;
          }
          lunarDay = duration - (yearMonth[i - 1] ? yearMonth[i - 1] : 0) + 1;
          break;
        }
      }
    }
    lunarMonth = lunarMonth < 10 ? `0${lunarMonth}` : lunarMonth;
    lunarDay = lunarDay < 10 ? `0${lunarDay}` : lunarDay;
    return `${lunarYear}-${lunarMonth}-${lunarDay}`;
  }

  // 获取两个日期之间的天数
  getDaysBetweenSolarDate (date1, date2) {
    return dayjs(date1).diff(date2, 'days');
  }

  getMonthsByLunarYear(yearData, monthData) {
    let res = [], temp = 0;
    let len = (yearData[0] === 0 ? 12 : 13);
    for (let i = 0; i < len; i++) {
      temp = 0;
      for (let j = 0; j <= i; j++) {
        temp += monthData[j];
      }
      res.push(temp);
    }
    return res;
  }

  // 获取农历每年的天数
  getDaysByLunarYear(months) {
    var len = months.length;
    return (months[len - 1] === 0 ? months[len - 2] : months[len - 1]);
  }

  //农历月份天数数组
  getLunarMonths(yearData) {
    let leapMonth = yearData[0];
    let bit = yearData[3].toString(2);
    let months = [];
    for (let i = 0; i < bit.length; i++) {
      months[i] = bit.substr(i, 1);
    }
    months.unshift(...new Array(16 - months.length).fill('0'));
    months = months.slice(0, (leapMonth === 0 ? 12 : 13));
    for (let i = 0; i < months.length; i++) {
      months[i] = months[i] - 0 + 29;
    }
    return months;
  }

  // 获取指定农历年份的闰月
  getLeapMonth(yearData) {
    return yearData[0];
  }
}

export default SolarLunarConverter;
